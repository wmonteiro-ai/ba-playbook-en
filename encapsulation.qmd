# Encapsulation: Creating Secure Black Boxes

In the last chapter, we created our first "smart" objects—blueprints that bundle data (state) and actions (behavior) together. This is a huge step up from dealing with disconnected, loose variables.

But we've given the outside world too much power. Our `Product` object allows anyone to reach in and set its price to `-50.00`, a nonsensical value. Our objects are currently like cities without laws; anyone can do anything, leading to chaos and corruption. An object with invalid data is a ticking time bomb in our application.

To build reliable systems, we need to enforce rules. We need to guarantee that our objects can never be put into a broken or invalid state. This brings us to the first major pillar of Object-Oriented Programming: **Encapsulation**.

## The Principle: Hiding Complexity, Exposing Control

Encapsulation is the practice of bundling an object's data and methods together while deliberately hiding the internal complexity. You expose only a limited, safe, and well-defined set of controls to the outside world.

* **Analogy 1: The Car Dashboard**
    Think about the dashboard of a modern car. It provides a simple **interface** to an incredibly complex machine. You have a speedometer, a fuel gauge, a steering wheel, and a couple of pedals. These are your public controls. You don't have direct access to the fuel injection timing, the engine's RPM sensors, or the raw voltage of the battery. That complexity is hidden (encapsulated) from you. This design has two huge benefits:
    1.  **It protects you:** It's simple to use. You can't accidentally break the engine by "using the dashboard wrong."
    2.  **It protects the engine:** The car's internal computer can prevent you from doing something dangerous, like trying to shift into reverse while driving at high speed. The internal logic enforces the rules.

* **Analogy 2: The Restaurant Kitchen**
    A restaurant menu is another perfect example of an interface.
    * The **public interface** is the **menu**. It lists the dishes you can order (`deposit`, `withdraw`).
    * The **private implementation** is the **chaotic, secret, and complex kitchen**. It contains the raw ingredients (`private var balance`), the secret recipes, and the specific cooking techniques.

    As a customer, you don't need to know how the sauce is made. You just order "Spaghetti" from the menu and trust you will get a consistent and delicious result. The restaurant can change its kitchen staff, its suppliers, or even its cooking methods, but as long as the dish on the menu remains the same, your experience as a customer is unaffected. Encapsulation allows the internal implementation to change without breaking the code that uses it.

## Hands-On: Building a Truly Secure `BankAccount`

The `BankAccount` is the classic example for a reason: it perfectly illustrates the need to protect data and enforce rules. Let's build a richer, more realistic, and more idiomatic Scala version.

### Part 1: The Insecure Anarchy

First, the "before" picture. This class has no laws.

```scala
class InsecureBankAccount {
  var balance: Double = 0.0
  var owner: String = ""
}

val myAccount = new InsecureBankAccount()
myAccount.owner = "Alice"
myAccount.balance = 100.00 // So far, so good.

// But now, chaos can strike...
myAccount.balance = -9999.00 // The bank is now paying Alice to have an account?
myAccount.owner = "" // The account now has no owner.

println(s"Owner: '${myAccount.owner}', Balance: $$${myAccount.balance}")
```
This is a disaster waiting to happen. The object cannot protect its own state, making it completely unreliable.

### Part 2: The Secure Black Box — An Idiomatic Scala Approach

Let's fix this by hiding the internal data and exposing only safe, public methods. We'll use some common Scala conventions.

```scala
import scala.collection.mutable.ListBuffer

class BankAccount(val accountId: String, val owner: String) {

  // 1. The internal state. We use a '_' prefix as a common convention
  //    for a private field that has a public accessor. This is PRIVATE.
  private var _balance: Double = 0.0
  private val _transactionHistory: ListBuffer[String] = ListBuffer()

  // 2. A PUBLIC "getter" method. In Scala, it's idiomatic to define
  //    methods that access state without parentheses. This lets callers
  //    write 'myAccount.balance', which looks like field access but is
  //    actually calling our safe, public method.
  def balance: Double = _balance
  def transactionHistory: List[String] = _transactionHistory.toList // Return an immutable copy

  // 3. A public method (a "command") to safely modify state.
  def deposit(amount: Double): Unit = {
    if (amount > 0) {
      _balance += amount // same as _balance = _balance + amount
      _transactionHistory += s"Deposited $$${amount}"
      println(s"Deposit successful. New balance is $$${_balance}")
    } else {
      println("Error: Deposit amount must be positive.")
    }
  }

  // 4. Another public command with more complex validation logic.
  def withdraw(amount: Double): Unit = {
    if (amount <= 0) {
      println("Error: Withdrawal amount must be positive.")
    } else if (amount > _balance) {
      println(s"Error: Insufficient funds. Cannot withdraw $$${amount} from balance of $$${_balance}.")
    } else {
      _balance -= amount
      _transactionHistory += s"Withdrew $$${amount}"
      println(s"Withdrawal successful. New balance is $$${_balance}")
    }
  }
}
```

### Part 3: Interacting with the Secure Object

Now, let's use our new, robust `BankAccount`. Notice how we, as the user of the class, can only interact with it through the simple, safe methods provided.

```scala
val secureAccount = new BankAccount("ACC123", "Bob")

println(s"Account created for ${secureAccount.owner} with ID ${secureAccount.accountId}")

// Let's try to do bad things...
// secureAccount._balance = -5000.00 // ERROR! This line won't compile. '_balance' is private.

// Let's use the public interface (the "menu")
secureAccount.deposit(200.00)
secureAccount.deposit(-50.00) // Our validation logic kicks in!
secureAccount.withdraw(75.00)
secureAccount.withdraw(500.00) // Our validation logic kicks in!

// We can safely read the state using our public accessors
println(s"Final balance for ${secureAccount.owner} is $$${secureAccount.balance}")

println("\n--- Transaction History ---")
secureAccount.transactionHistory.foreach(println)
```
Our object now protects itself. It is responsible for maintaining its own integrity. We have successfully enforced our business rules (invariants), such as "the balance can never be negative" and "a deposit amount must be positive."

## The Strategic Value: Why Encapsulation is a Superpower

Encapsulation is more than just a defensive mechanism; it's a core strategy for building large, maintainable software.

* **Benefit 1: Maintainability & Flexibility**
    Because we've separated the public interface (the menu) from the private implementation (the kitchen), we are now free to change the implementation without breaking anyone's code. For example, we could decide to add logging to every deposit without changing the `deposit` method's signature. The user of our class is unaffected, but our internal logic has improved.

* **Benefit 2: Reduced Complexity (Abstraction)**
    As a user of the `BankAccount` class, you don't need to know or care about how it stores the transaction history or what logic it runs for withdrawals. You can treat it as a reliable "black box." When you build systems out of many such black boxes, you can manage far greater complexity because you only have to think about one small part at a time.

* **Benefit 3: Enforcing Invariants**
    An **invariant** is a rule or condition that must *always* be true for an object throughout its life. For our `BankAccount`, an invariant is that `balance` must never be negative. Encapsulation is the primary tool we use to protect an object's invariants, ensuring the object is always in a valid, consistent state.

## Final Design Tips

* **Default to `private`.** When adding a new field to a class, make it `private` first. You can always decide to expose it later through a public method if needed. It's much easier to loosen security than to tighten it after the fact.
* **Be Wary of Public "Setters."** Be very cautious about creating public methods that allow the outside world to freely change your object's internal state (e.g., `def setBalance(newBalance: Double)`). Always ask: does the outside world need this level of direct control, or should they be calling a more descriptive method like `applyInterest()` or `correctTransaction()`?
* **Immutability is the Strongest Encapsulation.** An object whose state can never change after it's created is called **immutable**. If all the fields in our `BankAccount` were `val`s and no methods modified them, it would be perfectly safe and encapsulated by design. In functional programming, this is the preferred approach.

You have now learned how to create objects that are not just containers for data, but are responsible, secure, and robust guardians of their own state. This is a massive leap in your journey as a software craftsperson.